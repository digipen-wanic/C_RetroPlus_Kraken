class PacmanMovement : ZilchComponent
{
  [Property] var LeftKey : Keys = Keys.A;
  [Property] var RightKey : Keys = Keys.D;
  [Property] var UpKey : Keys = Keys.W;
  [Property] var DownKey: Keys = Keys.S;
  [Property] var MoveDistanceX : Real3 = Real3(0.9,0.0,0.0);
  [Property] var MoveDistanceY : Real3 = Real3(0.0,0.9,0.0);
  [Property] var MoveSpeed : Real = 1;
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
  }
  function OnLogicUpdate(event : UpdateEvent)
  {
    if(Zero.Keyboard.KeyIsDown(this.LeftKey))
    {
      
      //Actions.Property(this.Owner.Actions ,@this.Owner.Movement,this.MoveDistance,this.MoveSpeed, Ease.Linear);
      Actions.Property(this.Owner.Actions,@this.Owner.Transform.Translation, this.Owner.Transform.Translation - this.MoveDistanceX,this.MoveSpeed, Ease.Linear);
    }
    else if(Zero.Keyboard.KeyIsDown(this.RightKey))
    {
      Actions.Property(this.Owner.Actions,@this.Owner.Transform.Translation, this.Owner.Transform.Translation + this.MoveDistanceX,this.MoveSpeed, Ease.Linear);
    }
    else if(Zero.Keyboard.KeyIsDown(this.UpKey))
    {
      Actions.Property(this.Owner.Actions,@this.Owner.Transform.Translation,this.Owner.Transform.Translation + this.MoveDistanceY,this.MoveSpeed, Ease.Linear);
    }
    else if(Zero.Keyboard.KeyIsDown(this.DownKey))
    {
      Actions.Property(this.Owner.Actions,@this.Owner.Transform.Translation,this.Owner.Transform.Translation - this.MoveDistanceY,this.MoveSpeed, Ease.Linear);
    }
  }
  function OnKeyDown(event : KeyboardEvent)
  {
  }
}