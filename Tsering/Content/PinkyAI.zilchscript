class PinkyAI : ZilchComponent
{
  [Dependency] var ValidMove : ValidMove;
  [Property] var MoveDistanceX : Real3 = Real3(0.9,0.0,0.0);
  [Property] var MoveDistanceY : Real3 = Real3(0.0,0.9,0.0);
  [Property] var MoveSpeed : Real = 1;
  [Property] var PacMan : CogPath = null;
  var MoveBool : Real = 0.0;
  var BMove : Real = 0.0;
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    /*
    this.MoveBool = this.BestMove();
    var lastMove : Real = this.MoveBool;
    if(this.ValidMove.ResultE)
    {
      if(this.MoveBool == 1)
        Actions.Property(this.Owner.Actions,@this.Owner.Transform.Translation, this.Owner.Transform.Translation + this.MoveDistanceX,this.MoveSpeed, Ease.Linear);
    }
    else if(this.ValidMove.ResultW)
    {
      if(this.MoveBool == 2)
        Actions.Property(this.Owner.Actions,@this.Owner.Transform.Translation, this.Owner.Transform.Translation - this.MoveDistanceX,this.MoveSpeed, Ease.Linear);
    }
    else if(this.ValidMove.ResultN)
    {
      if(this.MoveBool == 3)
        Actions.Property(this.Owner.Actions,@this.Owner.Transform.Translation, this.Owner.Transform.Translation + this.MoveDistanceY,this.MoveSpeed, Ease.Linear);
    }
    else if(this.ValidMove.ResultS)
    {
      if(this.MoveBool == 4)
        Actions.Property(this.Owner.Actions,@this.Owner.Transform.Translation, this.Owner.Transform.Translation - this.MoveDistanceY,this.MoveSpeed, Ease.Linear);
    }
    */
  }
  function BestMove() : Real
  {
    /*
    var result = this.PacMan.Transform.Translation.X - this.Owner.Transform.Translation.X;
    var result2 = this.PacMan.Transform.Translation.Y - this.Owner.Transform.Translation.Y;
    var temp1 = result;
    var temp2 = result2;
    result = Math.Abs(result);
    result2 = Math.Abs(result2);
    if(result > result2 && temp1 > 0.0)
    {
      this.BMove = 1.0;
    }
    else if(result > result2 && temp1 < 0.0)
    {
      this.BMove = 2.0;
    }
    else if(result < result2 && temp2 > 0.0)
    {
      this.BMove= 3.0;
    }
    else if(result < result2 && temp2 < 0.0)
    {
      this.BMove = 4.0;
    }
    */
    return this.BMove;
  }
}
