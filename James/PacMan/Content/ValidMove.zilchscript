class ValidMove : ZilchComponent
{
  [Dependency]
  var Transform : Transform;
  [Property]
  var DrawDebugLine : Boolean = true;
  [Property]
  var MaxDebugLength : Real = 1.0;
  // E, W, N, S
  // 0, 1, 2, 3
  var ResultDirection : Array[Boolean] = Array[Boolean](4, false);
  /*
  var ResultN : Boolean = false;
  var ResultE : Boolean = false;
  var ResultS : Boolean = false;
  var ResultW : Boolean = false;
  */
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    this.ResultDirection.Set(2,this.CastRay(Real3(0,1.0,0.0)));
    this.ResultDirection.Set(0,this.CastRay(Real3(1.0,0.0,0.0)));
    this.ResultDirection.Set(3,this.CastRay(Real3(0.0,-1.0,0.0)));
    this.ResultDirection.Set(1,this.CastRay(Real3(-1.0,0.0,0.0)));
  }

  function OnLogicUpdate(event : UpdateEvent)
  {    
    this.ResultDirection.Set(2,this.CastRay(Real3(0,1.0,0.0)));
    this.ResultDirection.Set(0,this.CastRay(Real3(1.0,0.0,0.0)));
    this.ResultDirection.Set(3,this.CastRay(Real3(0.0,-1.0,0.0)));
    this.ResultDirection.Set(1,this.CastRay(Real3(-1.0,0.0,0.0)));
  }
  function CastRay(direction : Real3) : Boolean
  {
    var filter = CastFilter();
    var rBool : Boolean = false;
    filter.IgnoreKinematic = true;
    var segment = Segment();
    segment.Start = (this.Owner.Transform.Translation);
    segment.End = segment.Start + direction;
    
    var result = this.Space.PhysicsSpace.CastSegment(segment, 2 , filter);
    
    if(result.IsEmpty)
    {
      rBool = true;
    }
    else
    {
      rBool = false;
    }
    
    if(this.DrawDebugLine)
    {
      var debugSegment = DebugLine();
      debugSegment.Start = segment.Start;
      debugSegment.End = segment.Start + direction;
      debugSegment.HeadSize = 0.2;
      DebugDraw.Add(debugSegment);
    }
    return rBool;
  }
}
