class FleeingAI : ZilchComponent
{
  [Dependency] var ValidMove : ValidMove;
  [Property] var MoveDistanceX : Real3 = Real3(1,0.0,0.0);
  [Property] var MoveDistanceY : Real3 = Real3(0.0,1,0.0);
  [Property] var MoveSpeed : Real = 3;
  var RandomGenerator : Random = Random();
  var RandInt : Integer = 0;
  var AvailableDirections : Array[Boolean] = Array[Boolean](4, true);
  var DistanceFromPacman : Array[Real] = Array[Real](4, 0);
  var MoveBool : Real;
  var PreviousDirection : Integer = 1;
  var BMove : Real = 0.0;
  var SecondBMove : Real = 0.0;
  function Initialize(init : CogInitializer)
  {
    Console.WriteLine(this.AvailableDirections);
    //calls the function
    this.CalculateNextMove();
  }
  function CalculateNextMove()
  {
    //starts the sequence for the actions
    var actionSequence = Actions.Sequence(this.Owner.Actions);
    
    //set tiles that can't be moved to
    this.ValidMove.ResultDirection.Set(this.PreviousDirection, false);
    
    var options = 0;
    foreach(var direction in this.ValidMove.ResultDirection)
    {
      if(direction)
        options +=1;
    }
    
    
    //calculate adjacent tile distances
    this.RandInt = this.RandomGenerator.DieRoll(options);
    Console.WriteLine(this.RandInt);
   // while(!this.ValidMove.ResultDirection.Get(this.RandInt) || this.PreviousDirection == this.RandInt)
   // {
   //   this.RandInt = this.RandomGenerator.DieRoll(4) - 1;
   // }
    if(this.ValidMove.ResultDirection[0])
    {
      options-=1;
      if(options<=0)
      {
        Actions.Property(actionSequence,@this.Owner.Transform.Translation, Math.Round(this.Owner.Transform.Translation) + this.MoveDistanceX,this.MoveSpeed, Ease.Linear);
        this.PreviousDirection = 1;
      }
    }
    else if(this.ValidMove.ResultDirection[1])
    {
      options-=1;
      if(options<=0)
      {
        Actions.Property(actionSequence,@this.Owner.Transform.Translation, Math.Round(this.Owner.Transform.Translation) - this.MoveDistanceX,this.MoveSpeed, Ease.Linear);
        this.PreviousDirection = 0; 
      }
    
    }
    else if(this.ValidMove.ResultDirection[2])
    {
      options-=1;
      if(options<=0)
      {
        Actions.Property(actionSequence,@this.Owner.Transform.Translation, Math.Round(this.Owner.Transform.Translation) + this.MoveDistanceY,this.MoveSpeed, Ease.Linear);
        this.PreviousDirection = 3;
      }
    }
    else if(this.ValidMove.ResultDirection[3])
    {
      options-=1;
      if(options<=0)
      {
        Actions.Property(actionSequence,@this.Owner.Transform.Translation, Math.Round(this.Owner.Transform.Translation) - this.MoveDistanceY,this.MoveSpeed, Ease.Linear);
        this.PreviousDirection = 2;
      }
    }
    
    //reset all available directions to true
    this.AvailableDirections = Array[Boolean](4, true);
    // this makes this recursive
    Actions.Call(actionSequence, this.CalculateNextMove);
  }
}